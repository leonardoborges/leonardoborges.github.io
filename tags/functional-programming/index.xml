<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>functional-programming on Leonardo Borges</title>
    <link>http://leonardoborges.com/tags/functional-programming/</link>
    <description>Recent content in functional-programming on Leonardo Borges</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Mar 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://leonardoborges.com/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clojure Reactive Programming has been published</title>
      <link>http://leonardoborges.com/writings/2015/03/27/clojure-reactive-programming-has-been-published/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2015/03/27/clojure-reactive-programming-has-been-published/</guid>
      <description>I&amp;rsquo;m extremely happy to let everyone know my book, Clojure Reactive Programming, has finally been published!
You can get it at the publisher&amp;rsquo;s website or on Amazon. I had a great time writing it and I truly hope you find it useful!
I&amp;rsquo;ve met a few authors here and there and I heard more than once that a book is never really finished. I now know what they mean.
The book doesn&amp;rsquo;t cover everything I wanted to write about due to time and space limitations.</description>
    </item>
    
    <item>
      <title>EuroClojure 2014 and announcing my book</title>
      <link>http://leonardoborges.com/writings/2014/07/20/euroclojure-2014-and-clojure-reactive-programming/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2014/07/20/euroclojure-2014-and-clojure-reactive-programming/</guid>
      <description>A bit late for a EuroClojure 2014 post but I suppose &amp;ldquo;better late than never&amp;rdquo; applies here.
The best part of every conference is the networking. Meeting new and interesting people is priceless and I did plenty of that - mostly over Polish beer and food. Polish beer isn&amp;rsquo;t the greatest but if you must have it, better stick to Żywiec. It&amp;rsquo;s widely available and was the one which didn&amp;rsquo;t give me a headache :) - I&amp;rsquo;ve been told there are amazing microbreweries though I didn&amp;rsquo;t get a chance to try any while in Krákow.</description>
    </item>
    
    <item>
      <title>Functional composition with Monads, Kleislis and Functors</title>
      <link>http://leonardoborges.com/writings/2014/06/17/functional-composition-with-monads-kleisli-functors/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2014/06/17/functional-composition-with-monads-kleisli-functors/</guid>
      <description>I&amp;rsquo;ve been learning Scala for my current client project and I find writing to be a great tool to test my understanding of any given topic. This means there might be a few Scala posts coming up soon as I keep learning interesting things.
Today I&amp;rsquo;ll be exploring a few different ways in which you can compose programs. I&amp;rsquo;ll be using Scalaz in this post.
The examples that follow all deal with Vehicles - more specifically makes and parts:</description>
    </item>
    
    <item>
      <title>CUFP/ICFP 2013</title>
      <link>http://leonardoborges.com/writings/2013/09/25/cufp-slash-icfp-2013/</link>
      <pubDate>Wed, 25 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2013/09/25/cufp-slash-icfp-2013/</guid>
      <description>I&amp;rsquo;m sitting in the Lobby of the Hilton in Boston and since my flight back to Australia isn&amp;rsquo;t for a few hours I thought I&amp;rsquo;d write my experience report while everything is still fresh in my mind.
  CUFP - Commercial Users of Functional Programming - is a Workshop-like conference targeting the practically-minded functional programming community.
As it&amp;rsquo;s stated on their website, &amp;ldquo;The CUFP workshop is a place where people can see how others are using functional programming to solve real world problems […]&amp;quot;.</description>
    </item>
    
    <item>
      <title>Purely functional data structures in Clojure: Red-Black Trees</title>
      <link>http://leonardoborges.com/writings/2013/07/15/purely-functional-data-structures-in-clojure-red-black-trees/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2013/07/15/purely-functional-data-structures-in-clojure-red-black-trees/</guid>
      <description>This post is part of a series about Chris Okasaki&amp;rsquo;s Purely Functional Data Structures. You can see all posts in the series by visiting the functional-data-structures category in this blog.
  Recently I had some free time to come back to Purely Functional Data Structures and implement a new data structure: Red-black trees.
Red-black trees Red-black trees are a type of self-balancing binary search tree. Back when I first learned the balancing algorithm used in operations such as insert and delete, I remember it being a particularly tricky one.</description>
    </item>
    
    <item>
      <title>Functional Programmers Unite! LambdaJam down under</title>
      <link>http://leonardoborges.com/writings/2013/04/11/functional-programmers-unite-lambdajam-down-under/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2013/04/11/functional-programmers-unite-lambdajam-down-under/</guid>
      <description>I hinted at LambdaJam Australia back in my 2012 Highlights post and the dates are fast approaching so I thought appropriate to blog about it once more.
YOW! LambdaJam is a conference targeted at intermediate and advanced functional programmers and is organised in talks, jams and workshops.
 Talks are the traditional format and are 30 minutes long; Workshops aim to introduce a specific subjects to attendees in great detail and are up to two hours long; Jams are hands-on sessions.</description>
    </item>
    
    <item>
      <title>clojure and why calculating is better than scheming</title>
      <link>http://leonardoborges.com/writings/2013/03/25/clojure-and-why-calculating-is-better-than-scheming/</link>
      <pubDate>Mon, 25 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2013/03/25/clojure-and-why-calculating-is-better-than-scheming/</guid>
      <description>Last week while attending Clojure/West in Portland I came across a paper called Why calculating is better than scheming. In a nutshell, this paper is a critique to Abelson and Sussman&amp;lsquo;s classic textbook SICP - Structure and Interpretation of Computer Programs, used by MIT for many years to teach their introductory programming course.
If you haven&amp;rsquo;t read SICP, you should. It&amp;rsquo;s an amazing book. It uses Scheme, a dialect of Lisp, as the vehicle to present fundamental programming concepts.</description>
    </item>
    
    <item>
      <title>Purely functional data structures in Clojure: Leftist Heaps</title>
      <link>http://leonardoborges.com/writings/2013/02/03/purely-functional-data-structures-in-clojure-leftist-heaps/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2013/02/03/purely-functional-data-structures-in-clojure-leftist-heaps/</guid>
      <description>This post is part of a series about Chris Okasaki&amp;rsquo;s Purely Functional Data Structures. You can see all posts in the series by visiting the functional-data-structures category in this blog.
  Last year I started reading a book called Purely Functional Data Structures. It&amp;rsquo;s a fascinating book and if you&amp;rsquo;ve ever wondered how Clojure&amp;rsquo;s persistent data structures work, it&amp;rsquo;s mandatory reading.
However, all code samples in the book are written in ML - with Haskell versions in the end of the book.</description>
    </item>
    
    <item>
      <title>bouncer validation lib for clojure</title>
      <link>http://leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/</guid>
      <description>Today I&amp;rsquo;m releasing bouncer, which was extracted from a project I&amp;rsquo;ve been working on.
It&amp;rsquo;s a validation library for Clojure apps and it lets you write code like this:
(def person {:name &amp;#34;Leo&amp;#34;}) (validate person :name required :age [required number]) If you&amp;rsquo;d like to see more examples and a detailed guide check out the github repository. The README should get you started.
This post however isn&amp;rsquo;t only about announcing bouncer. It&amp;rsquo;s also about the motivation and implementation details behind it.</description>
    </item>
    
    <item>
      <title>Monads in small bites - Part IV - Monads</title>
      <link>http://leonardoborges.com/writings/2012/12/08/monads-in-small-bites-part-iv-monads/</link>
      <pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2012/12/08/monads-in-small-bites-part-iv-monads/</guid>
      <description>This is Part IV of my Monads tutorial. Make sure you read the previous parts:
  Part I - Functors
  Part II - Applicative Functors
  Part III - Monoids
  Part IV - Monads (this post)
  A quick recap In Part I we learned about Functors, which are things that can be mapped over using a normal function - fmap is used for that.</description>
    </item>
    
    <item>
      <title>Monads in small bites - Part III - Monoids</title>
      <link>http://leonardoborges.com/writings/2012/12/05/monads-in-small-bites-part-iii-monoids/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2012/12/05/monads-in-small-bites-part-iii-monoids/</guid>
      <description>This is Part III of my Monads tutorial. Make sure you read the previous parts:
  Part I - Functors
  Part II - Applicative Functors
  Part III - Monoids (this post)
  Part IV - Monads
  Monoids Simply put, Monoids describe types containing a binary function and an identity value.
When applied to the identity value and a random value x, said function leaves its argument x untouched, returning it as a result.</description>
    </item>
    
    <item>
      <title>Monads in small bites - Part II - Applicative Functors</title>
      <link>http://leonardoborges.com/writings/2012/12/02/monads-in-small-bites-part-ii-applicative-functors/</link>
      <pubDate>Sun, 02 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2012/12/02/monads-in-small-bites-part-ii-applicative-functors/</guid>
      <description>This is Part II of my Monads tutorial. Make sure you read the previous parts:
  Part I - Functors
  Part II - Applicative Functors (this post)
  Part III - Monoids
  Part IV - Monads
  Applicative Functors In Part I I talked a little about Haskell type signatures and introduced Functors, which provide a way to map standard functions over values which are wrapped inside a Functor - we used fmap for that.</description>
    </item>
    
    <item>
      <title>Monads in small bites - Part I - Functors</title>
      <link>http://leonardoborges.com/writings/2012/11/30/monads-in-small-bites-part-i-functors/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2012/11/30/monads-in-small-bites-part-i-functors/</guid>
      <description>Today I join the already bloated group of people who wrote monad tutorials. It&amp;rsquo;s a bit of a ritual, really.
Different than most tutorials though I aim to take a different approach. The good news is that I won&amp;rsquo;t be comparing monads to burritos :)
People say one needs to have his/her own epiphany in order to understand Monads and reading explanations from others is of little help. My goal is to disprove that.</description>
    </item>
    
    <item>
      <title>Clojure, leiningen 2 and Heroku: AOT compilation gotchas</title>
      <link>http://leonardoborges.com/writings/2012/09/10/clojure-leiningen-heroku-aot-compilation-gotchas/</link>
      <pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2012/09/10/clojure-leiningen-heroku-aot-compilation-gotchas/</guid>
      <description>Recently I upgraded the clojure project I&amp;rsquo;m working on to Leiningen 2 in order to start using nrepl - since swank-clojure is now deprecated. Little did I know this would lead me to a small debugging adventure.
Heroku I use Heroku as my deployment platform and my project had been running on it for a few weeks without any issues. I also use Heroku&amp;rsquo;s PostgreSQL solution.
However, by upgrading to Leiningen 2, my project started throwing some weird exceptions during deployment - it couldn&amp;rsquo;t connect to my database any longer.</description>
    </item>
    
    <item>
      <title>Sean Corfield: Clojure and CFML sitting in a tree</title>
      <link>http://leonardoborges.com/writings/2012/08/23/sean-corfield-clojure-and-cfml-sitting-in-a-tree/</link>
      <pubDate>Thu, 23 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://leonardoborges.com/writings/2012/08/23/sean-corfield-clojure-and-cfml-sitting-in-a-tree/</guid>
      <description>Last night I attended the Adobe User Group here in Sydney. That might strike some of you as a big surprise given my relationship with Adobe is pretty much limited to fiddling with Photoshop/Lightroom to get my photos looking nice.
However the reason for which I attended the meetup is that Sean Corfield - a prolific member of the Clojure community - gave a presentation on how he introduced and migrated most of his backend code at World Singles from CFML to Clojure - hence my interest.</description>
    </item>
    
  </channel>
</rss>